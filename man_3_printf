.\" Automatically generated by Pandoc 2.5
.\"
.TH "_printf" "1" "April 2022" "_printf 1.0.0" ""
.hy
.SH NAME
.PP
_print \- formatted output conversion
.SH SYNOPSIS
.PP
\f[B]#include \[lq]main.h\[rq]\f[R]
.PP
**int _printf(const char *, \&...)**
.SH DESCRIPTION
.PP
**_printf()** prints to the standard output (the monitor) a specified
input string which would be converted to get desired output.
It makes uses of some format specifiers to get the job done.
.SS Return Value
.PP
On successful return, it returns the number of characters printed, which
excludes the null byte which terminates the string.
On the instance of an error, a negative value is returned.
.SS Format of the format string
.PP
The format string is a character string, beginning and ending in its
initial shift state, if any.
The format string is composed of zero or more directives: ordinary
characters (not %), which are copied unchanged to the output stream; and
conversion specifications, each of which results in fetching zero or
more subsequent arguments.
Each conversion specification is introduced by the character %, and ends
with a conversion specifier.
.SS Conversion specifiers
.IP
.nf
\f[C]
A character that specifies the type of conversion to be applied.
\f[R]
.fi
.PP
The conversion specifiers and their meanings are:
.PP
\f[B]d\f[R], \f[B]i\f[R] The int argument is converted to signed decimal
notation.
.PP
\f[B]c\f[R] The int argument is converted to an unsigned char, then the
resulting character is written.
.PP
\f[B]s\f[R] The const char * argument is expected to be a pointer to an
array of character type (pointer to a string_.
Characters from the array are written up to a terminating null byte
.PP
\f[B]S\f[R] Prints a string.
Non printable characters are pointed as \[lq]\[rq] followed by their
ASCII values in two digit hexadecimal
.PP
\f[B]x\f[R], \f[B]X\f[R] The unsigned int argument is converted to
unsigned lowercase hexadecimal notation (x) or unsigned uppercase
Hexadecimal notation (X)
.PP
\f[B]u\f[R] The unsigned int argument is converted to unsigned decimal
notation
.PP
\f[B]o\f[R], \f[B]b\f[R] The unsigned int argument is converted to
unsigned octal notation(o) or binary notation(b)
.PP
\f[B]p\f[R] Address is printed in hexadecimal
.PP
\f[B]r\f[R] prints string in reverse
.PP
\f[B]R\f[R] Prints a string converted to rot13
.PP
\f[B]%\f[R] A `%' written but no argument is converted.
The complete version specification is `%%'
.SH EXAMPLE
.PP
To print my name, age, school and dob, where name, school are pointers
to string and age and dob are integers
.PP
#include \[lq]main.h\[rq]
.PP
_printf(\[lq]%s attends %s at age %d.\ He was born on %d\[rq], name,
school, age, dob\[dq]);
.SH BUGS
.PP
Discovered none
.SH AUTHORS
Aicha Bouichou, Milouda BOUICHOU.
